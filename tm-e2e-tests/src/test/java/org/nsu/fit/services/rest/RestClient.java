package org.nsu.fit.services.rest;

import com.fasterxml.jackson.core.type.TypeReference;
import org.glassfish.jersey.client.ClientConfig;
import org.nsu.fit.services.fixtures.ContactFixtureBuilder;
import org.nsu.fit.services.log.Logger;
import org.nsu.fit.services.rest.data.*;
import org.nsu.fit.shared.JsonMapper;

import javax.ws.rs.ProcessingException;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.ClientRequestContext;
import javax.ws.rs.client.ClientRequestFilter;
import javax.ws.rs.client.Entity;
import javax.ws.rs.client.Invocation;
import javax.ws.rs.core.MediaType;
import java.util.List;

public class RestClient {
    // Note: change url if you want to use the docker compose.
//    private static final String REST_URI = "http://localhost:8080/tm-backend/rest";
    private static final String REST_URI = "http://localhost:8089/tm-backend/rest";

    private final static Client client = ClientBuilder.newClient(new ClientConfig().register(RestClientLogFilter.class));

    public AccountTokenPojo authenticate(String login, String pass) {
        CredentialsPojo credentialsPojo = new CredentialsPojo();

        credentialsPojo.login = login;
        credentialsPojo.pass = pass;

        return post("authenticate", JsonMapper.toJson(credentialsPojo, true), AccountTokenPojo.class, null);
    }

    public CustomerPojo createAutoGeneratedCustomer(AccountTokenPojo accountToken) {
        // Лабораторная 3: Добавить обработку генерацию фейковых имен, фамилий и логинов.
        // * Исследовать этот вопрос более детально, возможно прикрутить специальную библиотеку для генерации фейковых данных.
        ContactPojo contactPojo = new ContactFixtureBuilder().build();

        return createCustomer(accountToken, contactPojo);
    }

    public CustomerPojo createCustomer(AccountTokenPojo accountToken, ContactPojo contactPojo) {
        return post("customers", JsonMapper.toJson(contactPojo, true), CustomerPojo.class, accountToken);
    }

    private static <R> R post(String path, String body, Class<R> responseType, AccountTokenPojo accountToken) {
        // Лабораторная 3: Добавить обработку Responses и Errors. Выводите их в лог.
        // Подумайте почему в filter нет Response чтобы можно было удобно его сохранить.
        Invocation.Builder request = client
                .target(REST_URI)
                .path(path)
                .request(MediaType.APPLICATION_JSON)
                .accept(MediaType.APPLICATION_JSON);

        if (accountToken != null) {
            request.header("Authorization", "Bearer " + accountToken.token);
        }

        String response;
        try {
            response = request.post(Entity.entity(body, MediaType.APPLICATION_JSON), String.class);
        } catch (ProcessingException | WebApplicationException exception) {
            Logger.error(String.valueOf(exception));
            return null;
        }
        if(response.equals("")){
            return null;
        }

        return JsonMapper.fromJson(response, responseType);
    }

    private static <R> R get(String path, TypeReference<R> responseType, AccountTokenPojo accountToken)
            throws ProcessingException, WebApplicationException {
        Invocation.Builder request = client
                .target(REST_URI)
                .path(path)
                .request(MediaType.APPLICATION_JSON)
                .accept(MediaType.APPLICATION_JSON);

        if (accountToken != null) {
            request.header("Authorization", "Bearer " + accountToken.token);
        }

        String response;
        try {
            response = request.get(String.class);
        } catch (ProcessingException | WebApplicationException exception) {
            Logger.error(String.valueOf(exception));
            throw exception;
        }

        return JsonMapper.fromJson(response, responseType);
    }

    public List<PlanPojo> getAvailablePlans(AccountTokenPojo accountToken) {
        return get("available_plans",  new TypeReference<List<PlanPojo>>(){}, accountToken);
    }

    private static class RestClientLogFilter implements ClientRequestFilter {
        @Override
        public void filter(ClientRequestContext requestContext) {
//            Logger.debug(requestContext.getEntity().toString());

            // Лабораторная 3: разобраться как работает данный фильтр
            // и добавить логирование METHOD и HEADERS.
            Logger.debug(requestContext.getMethod());
            Logger.debug(requestContext.getHeaders().toString());
        }
    }
}
